/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab2;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author F-E-R
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        vertexBtn.setSelected(true);
        infoLbl.setText("Now you are setting vertices");
        this.vectorVertices = new Vector<>();
        this.vectorEdges = new Vector<>();
    }

    private Vector<Vertex> vectorVertices;
    private Vector<Edge> vectorEdges;
    private Point p1, p2;
    private int adyacency[][], i_ady = 0;
    private double cost[][];
    private String recorridos[][];
    private String prev_info;
    private String caminomin = "";
    private String inicio, fin;
    private Vertex start, end;

    ;
//    private Vertex vertexMove;
//    private int iVertex;
    
    
    
    
    public void draw() {
        Graphics g = vistaPn.getGraphics();
        for (Vertex vertices : vectorVertices) {
            vertices.pintar(g);
        }
        for (Edge edge : vectorEdges) {
            edge.pintar(g);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vistaPn = new javax.swing.JPanel();
        infoLbl = new javax.swing.JLabel();
        vertexBtn = new javax.swing.JToggleButton();
        edgeBtn = new javax.swing.JToggleButton();
        deleteBtn = new javax.swing.JToggleButton();
        floydBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 680));
        setResizable(false);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(800, 600));

        vistaPn.setBackground(new java.awt.Color(247, 232, 236));
        vistaPn.setPreferredSize(new java.awt.Dimension(2000, 2000));
        vistaPn.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                vistaPnAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        vistaPn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                vistaPnMouseDragged(evt);
            }
        });
        vistaPn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                vistaPnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                vistaPnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout vistaPnLayout = new javax.swing.GroupLayout(vistaPn);
        vistaPn.setLayout(vistaPnLayout);
        vistaPnLayout.setHorizontalGroup(
            vistaPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );
        vistaPnLayout.setVerticalGroup(
            vistaPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(vistaPn);

        infoLbl.setFont(new java.awt.Font("Ebrima", 0, 14)); // NOI18N
        infoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLbl.setText("You are doing something");
        infoLbl.setAlignmentX(0.5F);

        vertexBtn.setText("Vertex");
        vertexBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertexBtnActionPerformed(evt);
            }
        });

        edgeBtn.setText("Edge");
        edgeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        floydBtn.setText("Floyd-Warshall");
        floydBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                floydBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                floydBtnMouseExited(evt);
            }
        });
        floydBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floydBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(infoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(109, 109, 109))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(vertexBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(edgeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122)
                .addComponent(floydBtn)
                .addGap(81, 81, 81))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vertexBtn)
                    .addComponent(edgeBtn)
                    .addComponent(deleteBtn)
                    .addComponent(floydBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(infoLbl)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void vistaPnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vistaPnMousePressed
        int i = 0;
        if (vertexBtn.isSelected() && evt.getButton() == MouseEvent.BUTTON1) {
            String name = JOptionPane.showInputDialog("Enter the vertex name");
            if (name != null) {
                this.vectorVertices.add(new Vertex(evt.getX(), evt.getY(), name));
                draw();
                adyacency = new int[vectorVertices.size()][vectorVertices.size()];
                cost = new double[vectorVertices.size()][vectorVertices.size()];
                recorridos = new String[vectorVertices.size()][vectorVertices.size()];
            }
        } else if (edgeBtn.isSelected() && evt.getButton() == MouseEvent.BUTTON1) {
            for (Vertex vertex : vectorVertices) {
                if (new Rectangle(vertex.getX() - Vertex.radio, vertex.getY() - Vertex.radio, Vertex.radio * 2, Vertex.radio * 2).contains(evt.getPoint())) {
                    if (p1 == null) {
                        p1 = new Point(vertex.getX(), vertex.getY());
                        vertex.aislado = false;
                        i_ady = i;
                    } else {
                        p2 = new Point(vertex.getX(), vertex.getY());
                        vertex.aislado = false;
                        String distance = JOptionPane.showInputDialog("Enter the distance between vertices");
                        if (distance != null) {
                            while (!isNumber(distance)) {
                                distance = JOptionPane.showInputDialog("Must be a number. Please try again");
                            }
                            this.vectorEdges.add(new Edge(p1.x, p1.y, p2.x, p2.y, distance));
                            draw();
                            adyacency[i_ady][i] = adyacency[i][i_ady] = 1;
                            cost[i_ady][i] = cost[i][i_ady] = Double.parseDouble(distance);
                        }
                        p1 = null;
                        p2 = null;
                    }
                }
                i++;
            }
        } else if(floydBtn.isSelected() && evt.getButton() == MouseEvent.BUTTON1){
            
            for (Vertex vertex : vectorVertices) {
                infoLbl.setText("Click on the end vertex");
                if (new Rectangle(vertex.getX() - Vertex.radio, vertex.getY() - Vertex.radio, Vertex.radio * 2, Vertex.radio * 2).contains(evt.getPoint())) {
                    if(start == null){
                        if(vertex.getAislado() == false){
                            start = vertex;
                        }else{
                            infoLbl.setText("Ingresa un vértice que no esté aislado");
                        }       
                    }else{
                        if(vertex.getAislado() == false){
                            end = vertex;
                            floyd1();
                        }else{
                            infoLbl.setText("Ingresa un vértice que no esté aislado");
                        }
                    }
                }
            }
            
        }

//        if (evt.getButton() == MouseEvent.BUTTON3) {
//            int c = 0;
//            for (Vertex vertex : vectorVertices) {
//                if (new Rectangle(vertex.getX() - Vertex.radio, vertex.getY() - Vertex.radio, Vertex.radio * 2, Vertex.radio * 2).contains(evt.getPoint())) {
//                    vertexMove = vertex;
//                    iVertex = c;
//                    break;
//                }
//                c++;
//            }
//        }

    }//GEN-LAST:event_vistaPnMousePressed

    private static boolean isNumber(String n) {
        try {
            Integer.parseInt(n);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    private void vistaPnAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_vistaPnAncestorMoved
        draw();
    }//GEN-LAST:event_vistaPnAncestorMoved

    private void vertexBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertexBtnActionPerformed
        if (!edgeBtn.isSelected() && !deleteBtn.isSelected()) {
            vertexBtn.setSelected(true);
        }
        edgeBtn.setSelected(false);
        deleteBtn.setSelected(false);
        infoLbl.setText("Now you are setting vertices");
    }//GEN-LAST:event_vertexBtnActionPerformed

    private void edgeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeBtnActionPerformed
        if (!vertexBtn.isSelected() && !deleteBtn.isSelected()) {
            edgeBtn.setSelected(true);
        }
        vertexBtn.setSelected(false);
        deleteBtn.setSelected(false);
        infoLbl.setText("Now you are setting edges");
    }//GEN-LAST:event_edgeBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if (!edgeBtn.isSelected() && !vertexBtn.isSelected()) {
            deleteBtn.setSelected(true);
        }
        edgeBtn.setSelected(false);
        vertexBtn.setSelected(false);
        infoLbl.setText("Now you are deleting objects");
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void vistaPnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vistaPnMouseReleased
//        vertexMove = null;
//        iVertex = -1;
    }//GEN-LAST:event_vistaPnMouseReleased

    private void vistaPnMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vistaPnMouseDragged
//        if (vertexMove != null) {
//            this.vectorVertices.set(iVertex, new Vertex(evt.getX(), evt.getY(), vertexMove.getName()));
//            int c = 0;
//            for (Edge edge : vectorEdges) {
//                if (new Rectangle(edge.getX1() - Vertex.radio, edge.getY1() - Vertex.radio, Vertex.radio * 2, Vertex.radio * 2).contains(evt.getPoint())) {
//                    this.vectorEdges.set(c, new Edge(evt.getX(), evt.getY(), edge.getX2(), edge.getY2(), edge.getDistance()));
//                } else if (new Rectangle(edge.getX2() - Vertex.radio, edge.getY2() - Vertex.radio, Vertex.radio * 2, Vertex.radio * 2).contains(evt.getPoint())) {
//                    this.vectorEdges.set(c, new Edge(edge.getX1(), edge.getY1(), evt.getX(), evt.getY(), edge.getDistance()));
//                }
//                c++;
//            }
//            draw();
//        }
    }//GEN-LAST:event_vistaPnMouseDragged

    private void floydBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floydBtnActionPerformed
//        if (!edgeBtn.isSelected() && !vertexBtn.isSelected()) {
//            floydBtn.setSelected(true);      Ver como hacer esto con el floyd
//        }
        floydBtn.setSelected(true);
        edgeBtn.setSelected(false);
        vertexBtn.setSelected(false);
        infoLbl.setText("Click on the initial vertex");
        start = null;      //Para que se vuelva a realizar el floyd warshall cada que se presione el boton
        end = null;
    }//GEN-LAST:event_floydBtnActionPerformed

    private void floydBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floydBtnMouseEntered
        prev_info = infoLbl.getText();
        infoLbl.setText("Click to see minimum paths");
    }//GEN-LAST:event_floydBtnMouseEntered

    private void floydBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floydBtnMouseExited
        infoLbl.setText(prev_info);
    }//GEN-LAST:event_floydBtnMouseExited

    public void floyd1(){
        inicio = start.getName();
        fin = end.getName();
        caminomin = inicio;
        

        if (vectorVertices.size() != 0) {

            recorrido1(recorridos);
            cost1(cost);

            floydw(cost, recorridos);

            for (int k = 0; k < cost.length; k++) {
                System.out.println("");
                for (int l = 0; l < cost.length; l++) {
                    System.out.print(cost[k][l] + "     ");
                }
            }

            System.out.println("      ");

            for (int k = 0; k < recorridos.length; k++) {
                System.out.println("");
                for (int l = 0; l < recorridos.length; l++) {
                    System.out.print(recorridos[k][l] + "     ");
                }
            }

            System.out.println("      ");
            caminomin = min(recorridos, inicio, fin, caminomin);
            System.out.println(caminomin);

        }
    }
    
    public void cost1(double costos[][]) {
        int i, j;
        for (i = 0; i < vectorVertices.size(); i++) {
            for (j = 0; j < vectorVertices.size(); j++) {
                if (i != j) {
                    if (costos[i][j] == 0) {
                        costos[i][j] = Double.POSITIVE_INFINITY;
                    }
                }
            }
        }
    }

    public void recorrido1(String recorridos[][]) {
        int i, j;
        for (j = 0; j < vectorVertices.size(); j++) {
            for (i = 0; i < vectorVertices.size(); i++) {
                if (i == j) {
                    recorridos[i][j] = "-";
                } else {
                    recorridos[i][j] = vectorVertices.get(j).getName();
                }
            }
        }
    }

    public void floydw(double costos[][], String recorridos[][]) {
        int i, j, k;

        for (k = 0; k < vectorVertices.size(); k++) {
            for (i = 0; i < vectorVertices.size(); i++) {
                for (j = 0; j < vectorVertices.size(); j++) {
                    if (costos[i][k] + costos[k][j] < costos[i][j]) {
                        costos[i][j] = costos[i][k] + costos[k][j];
                        recorridos[i][j] = vectorVertices.get(k).getName();
                    }
                }
            }
        }

    }

    public String min(String recorridos[][], String inicio, String fin, String camino) {
        int j = busqueda(recorridos, fin);
        int i;
        
        while (true) {
            i = busqueda(recorridos, inicio);
            if (recorridos[i][j].equals(fin)) {
                camino = camino + "->" + fin;
                break;
            } else {
                camino = camino + "-> " +recorridos[i][j];
                inicio = recorridos[i][j];
            }
        }
        return camino;
    }

    public int busqueda(String recorrido[][], String element) {
        int i, j;
        int pos = 0;

        for (i = 0; i < vectorVertices.size(); i++) {
            if (vectorVertices.get(i).getName().equals(element)) {
                pos = i;
                break;
            }
        }
        return pos;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton deleteBtn;
    private javax.swing.JToggleButton edgeBtn;
    private javax.swing.JButton floydBtn;
    private javax.swing.JLabel infoLbl;
    public static javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton vertexBtn;
    private javax.swing.JPanel vistaPn;
    // End of variables declaration//GEN-END:variables
}
